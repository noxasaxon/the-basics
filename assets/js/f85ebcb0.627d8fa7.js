"use strict";(self.webpackChunkthe_basics=self.webpackChunkthe_basics||[]).push([[467],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(n),d=s,h=m["".concat(l,".").concat(d)]||m[d]||p[d]||r;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,i=new Array(r);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2253:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(7462),s=(n(7294),n(3905));const r={},i=void 0,o={unversionedId:"01/01",id:"01/01",title:"01",description:"This file was auto-generated from the-basics/python/01/01.py",source:"@site/../python/01/01.md",sourceDirName:"01",slug:"/01/",permalink:"/the-basics/python/01/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"The Basics: Python",permalink:"/the-basics/python/intro"},next:{title:"external-resources",permalink:"/the-basics/python/external-resources"}},l={},c=[{value:"IMPORTS",id:"imports",level:2},{value:"PRIMITIVE TYPES",id:"primitive-types",level:2},{value:"FUNCTIONS",id:"functions",level:2},{value:"CLASSES",id:"classes",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"This file was auto-generated from ",(0,s.kt)("inlineCode",{parentName:"em"},"the-basics/python/01/01.py"))," "),(0,s.kt)("h2",{id:"imports"},"IMPORTS"),(0,s.kt)("p",null,' At the top of the file, we import our dependencies (also known as libraries).\nThe Python "Standard Library" (what comes built-in with Python) includes a few important libraries.\nYou import them the same way, but they don\'t need to be added to your requirements.txt file\nstandard library imports, no installation:'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"from ast import Str\nfrom dataclasses import dataclass\nimport json, pathlib, urllib3, subprocess\nfrom typing import Any, List, Optional\n")),(0,s.kt)("p",null," external dependencies, will throw an error if the libraries aren't installed"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"import requests\n")),(0,s.kt)("h2",{id:"primitive-types"},"PRIMITIVE TYPES"),(0,s.kt)("p",null,' Python\'s "primitive types".\nHere we are assigning the data on the right into our custom variable on the left.\nvariable_name <- data\nAssignment lets us store data for usage later, and reduces writing duplicate code.'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'an_integer = 3\na_float = 3.0\na_string = "this is a string type"\na_list = ["this", "is", "a", "list", "of", "strings", "and", "can", "be", "mutated"]\na_tuple = ("this", "is", "an", "immutable", "tuple", "of", "strings")\n')),(0,s.kt)("p",null," you can access list and tuple items by using the 'index' of the item you want.\nlists and tuples are zero-indexed, meaning their first item is actually item 0"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'assert a_list[0] == "this"\nassert a_list[0] == a_tuple[0]\nKEY_TO_INTEGER = "key_to_integer"\n')),(0,s.kt)("p",null," a dictionary is an object of Key:Value pairs.\nKeys must be 'hashable' which means they are usually strings.\nValues can be any type!"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'a_dictionary = {\n    "key_to_string": "value_a",\n    KEY_TO_INTEGER: 3,\n    "key_to_function": requests.get,\n    "key_to_class": Str,\n    "key_to_list": a_list,\n    "key_to_dict": {"sub_key_A": a_float},\n}\n')),(0,s.kt)("p",null," dictionary Values are accessed using their Key in brackets"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'assert a_dictionary[KEY_TO_INTEGER] == 3\nassert a_dictionary["key_to_string"] == "value_a"\n')),(0,s.kt)("h2",{id:"functions"},"FUNCTIONS"),(0,s.kt)("p",null," Functions. Python uses a colon ",(0,s.kt)("inlineCode",{parentName:"p"},":"),' and indented whitespace to show nested blocks\nA function must be defined before it can be used.\nUsing a function is also known as "calling" a function.\nDefining a function'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def a_function_that_does_nothing():\n    pass\n")),(0,s.kt)("p",null," Defining a function without type hints"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def sum_untyped(number_1, number_2):\n    return number_1 + number_2\n")),(0,s.kt)("p",null," Defining a function with type hints"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def sum_typed(number_1: int, number_2: int) -> int:\n    return number_1 + number_2\n")),(0,s.kt)("p",null," Defining a function with typehints & documentation (called a 'docstring').\nDocstrings are visible in your IDE by hovering over the function name."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'def head_of_list(a_list: List[Any]) -> Any:\n    """Get the first item in a list, raising an exception if list is empty.\\n\n    Args:\n        a_list: list containing any type of data\n    """\n    # here we use the `len` function to get the length of the provided list\n    if len(a_list) > 0:\n        return a_list[0]\n    else:\n        raise Exception("List is empty")\n')),(0,s.kt)("p",null," Calling Functions"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"a_function_that_does_nothing()\n")),(0,s.kt)("p",null," we can store the output of a function into a variable"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'sum_that_equals_3 = sum_untyped(1, 2)\nassert sum_that_equals_3 == 3\nsum_that_equals_5 = sum_typed(5, 0)\nassert sum_that_equals_5 == 5\nresult = head_of_list(a_list)\nassert result == "this"\n')),(0,s.kt)("h2",{id:"classes"},"CLASSES"),(0,s.kt)("p",null,' Classes. A class is used to group data and functions to interact with that data.\nA function that is part of a class is also called a "method".\nYou can create your own methods on a classs, but classes also come with a few built-in to assist you.\nFirst we define our class'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'class BusinessProcess:\n    """Some documentation about this class"""\n    # This is a special built-in method, that \'constructs\' the class for the first time.\n    # By adding our own parameters to the `__init__` method, we can\n    # force users to provide required data to create this class\n    def __init__(\n        self,\n        problem_statement: str,\n        acceptance_criteria: str,\n        estimated_min_to_complete: float,\n        estimated_iterations_per_week: float,\n    ) -> None:\n        if estimated_iterations_per_week < 0 or estimated_min_to_complete < 0:\n            raise Exception("You must provide positive numbers to business process")\n        self.problem_statement = problem_statement\n        self.acceptance_criteria = acceptance_criteria\n        self.estimated_min_to_complete = estimated_min_to_complete\n        self.estimated_iterations_per_week = estimated_iterations_per_week\n    # a \'method\' that uses data inside the class, which is accessed via the special "self" parameter available to classes\n    def hours_per_month(self) -> float:\n        # These parentheses are used by automatic formatters when lines get too long, but otherwise mean nothing in this context\n        weekly_minutes = (\n            self.estimated_min_to_complete * self.estimated_iterations_per_week\n        )\n        monthly_minutes = weekly_minutes * 4\n        monthly_hours = monthly_minutes / 60\n        return monthly_hours\n')),(0,s.kt)("p",null," then we create an instance of that class"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'access_audit_process = BusinessProcess(\n    problem_statement="Tools that have dangerous capabilities need to have access limited to only the users that require it. Regular auditing of access lists can help us find users that no longer need it.",\n    acceptance_criteria="We detect users with outdated access in tools X, Y, & Z within 1 week of them no longer needing access",\n    estimated_min_to_complete=30,\n    estimated_iterations_per_week=2,\n)\nassert access_audit_process.hours_per_month() == 4.0\n')),(0,s.kt)("p",null," A 'dataclass' is useful to quickly and easily group data together.\nIt automatically defines the ",(0,s.kt)("strong",{parentName:"p"},"init"),"() constructor for us!"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'@dataclass\nclass User:\n    name: str\n    team: str\n    current_access: List["AccessLevel"] = []\n@dataclass\nclass AccessLevel:\n    tool: "Tool"\n    access_role: "str"\n')),(0,s.kt)("p",null," classes can also be used to establish a common interface, when each item might have a\na different way to achieve the same outcome."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'@dataclass\nclass Tool:\n    "Parent class to define common interface for various tools we will audit."\n    name: str = ""\n    tool_owner: str = ""\n    def audit_user(self, user: User) -> AccessLevel:\n        raise NotImplementedError("Implement this in the child class")\n@dataclass\nclass Gsuite(Tool):\n    name = "Gsuite"\n    tool_owner = "IT"\n    def audit_user(self, user: User) -> AccessLevel:\n        # do some logic with the GSUITE api\n        return AccessLevel(self, "some_role_name_for_this_user_in_gsuite")\n@dataclass\nclass Slack(Tool):\n    name = "Slack"\n    tool_owner = "IT"\n    def audit_user(self, user: User) -> AccessLevel:\n        # do some logic with the SLACK api\n        return AccessLevel(self, "some_role_name_for_this_user_in_slack")\n')),(0,s.kt)("p",null," instantiate our tools"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"tools = [Slack(), Gsuite()]\n")),(0,s.kt)("p",null," instantiate our list of users to audit"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'users = [User("Saxon", "Security")]\n')),(0,s.kt)("p",null," for each user, check each tool to see what access they have"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"for user in users:\n    for tool in tools:\n        # check the user's access for this tool\n        audit_result = tool.audit(user)\n        # store the result at the end of this user's `current_access` field list\n        user.current_access.append(audit_result)\n")))}p.isMDXComponent=!0}}]);